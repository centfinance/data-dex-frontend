{"version":3,"file":"static/js/4426.9d60e62e.chunk.js","mappings":"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","sources":["components/PositionCard/Sushi.tsx","components/PositionCard/V2.tsx","pages/MigrateV2/index.tsx","pages/AppBody.tsx","utils/unwrappedToken.ts"],"sourcesContent":["import { Trans } from '@lingui/macro'\nimport { Token } from '@vanadex/sdk-core'\nimport Badge, { BadgeVariant } from 'components/Badge'\nimport { transparentize } from 'polished'\nimport { Link } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport styled from 'styled-components'\n\nimport { useColor } from '../../hooks/useColor'\nimport { unwrappedToken } from '../../utils/unwrappedToken'\nimport { ButtonEmpty } from '../Button'\nimport { LightCard } from '../Card'\nimport { AutoColumn } from '../Column'\nimport DoubleCurrencyLogo from '../DoubleLogo'\nimport { CardNoise } from '../earn/styled'\nimport { AutoRow, RowFixed } from '../Row'\nimport { Dots } from '../swap/styled'\nimport { FixedHeightRow } from '.'\n\nconst StyledPositionCard = styled(LightCard)<{ bgColor: any }>`\n  border: none;\n  background: ${({ theme, bgColor }) =>\n    `radial-gradient(91.85% 100% at 1.84% 0%, ${transparentize(0.8, bgColor)} 0%, ${theme.surface2} 100%) `};\n  position: relative;\n  overflow: hidden;\n`\n\ninterface PositionCardProps {\n  tokenA: Token\n  tokenB: Token\n  liquidityToken: Token\n  border?: string\n}\n\nexport default function SushiPositionCard({ tokenA, tokenB, liquidityToken, border }: PositionCardProps) {\n  const currency0 = unwrappedToken(tokenA)\n  const currency1 = unwrappedToken(tokenB)\n\n  const backgroundColor = useColor(tokenA)\n\n  return (\n    <StyledPositionCard border={border} bgColor={backgroundColor}>\n      <CardNoise />\n      <AutoColumn gap=\"md\">\n        <FixedHeightRow>\n          <AutoRow gap=\"8px\">\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\n            <Text fontWeight={535} fontSize={20}>\n              {!currency0 || !currency1 ? (\n                <Dots>\n                  <Trans>Loading</Trans>\n                </Dots>\n              ) : (\n                `${currency0.symbol}/${currency1.symbol}`\n              )}\n            </Text>\n\n            <Badge variant={BadgeVariant.WARNING}>Sushi</Badge>\n          </AutoRow>\n          <RowFixed gap=\"8px\">\n            <ButtonEmpty\n              padding=\"0px 35px 0px 0px\"\n              $borderRadius=\"12px\"\n              width=\"fit-content\"\n              as={Link}\n              to={`/migrate/v2/${liquidityToken.address}`}\n            >\n              <Trans>Migrate</Trans>\n            </ButtonEmpty>\n          </RowFixed>\n        </FixedHeightRow>\n      </AutoColumn>\n    </StyledPositionCard>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { CurrencyAmount, Percent, Token } from '@vanadex/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport JSBI from 'jsbi'\nimport { transparentize } from 'polished'\nimport { useState } from 'react'\nimport { ChevronDown, ChevronUp } from 'react-feather'\nimport { Link } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport styled from 'styled-components'\n\nimport { BIG_INT_ZERO } from '../../constants/misc'\nimport { useColor } from '../../hooks/useColor'\nimport { useTotalSupply } from '../../hooks/useTotalSupply'\nimport { useTokenBalance } from '../../state/connection/hooks'\nimport { currencyId } from '../../utils/currencyId'\nimport { unwrappedToken } from '../../utils/unwrappedToken'\nimport { ButtonEmpty, ButtonPrimary, ButtonSecondary } from '../Button'\nimport { LightCard } from '../Card'\nimport { AutoColumn } from '../Column'\nimport DoubleCurrencyLogo from '../DoubleLogo'\nimport { CardNoise } from '../earn/styled'\nimport CurrencyLogo from '../Logo/CurrencyLogo'\nimport { AutoRow, RowBetween, RowFixed } from '../Row'\nimport { Dots } from '../swap/styled'\nimport { FixedHeightRow } from '.'\n\nconst StyledPositionCard = styled(LightCard)<{ bgColor: any }>`\n  border: none;\n  background: ${({ theme, bgColor }) =>\n    `radial-gradient(91.85% 100% at 1.84% 0%, ${transparentize(0.8, bgColor)} 0%, ${theme.surface2} 100%) `};\n  position: relative;\n  overflow: hidden;\n`\n\ninterface PositionCardProps {\n  pair: Pair\n  showUnwrapped?: boolean\n  border?: string\n  stakedBalance?: CurrencyAmount<Token> // optional balance to indicate that liquidity is deposited in mining pool\n}\n\nexport default function V2PositionCard({ pair, border, stakedBalance }: PositionCardProps) {\n  const { account } = useWeb3React()\n\n  const currency0 = unwrappedToken(pair.token0)\n  const currency1 = unwrappedToken(pair.token1)\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userDefaultPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n\n  // if staked balance balance provided, add to standard liquidity amount\n  const userPoolBalance = stakedBalance ? userDefaultPoolBalance?.add(stakedBalance) : userDefaultPoolBalance\n\n  const poolTokenPercentage =\n    !!userPoolBalance &&\n    !!totalPoolTokens &&\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, userPoolBalance.quotient)\n      ? new Percent(userPoolBalance.quotient, totalPoolTokens.quotient)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, userPoolBalance.quotient)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  const backgroundColor = useColor(pair?.token0)\n\n  return (\n    <StyledPositionCard border={border} bgColor={backgroundColor}>\n      <CardNoise />\n      <AutoColumn gap=\"md\">\n        <FixedHeightRow>\n          <AutoRow gap=\"8px\">\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\n            <Text fontWeight={535} fontSize={20}>\n              {!currency0 || !currency1 ? (\n                <Dots>\n                  <Trans>Loading</Trans>\n                </Dots>\n              ) : (\n                `${currency0.symbol}/${currency1.symbol}`\n              )}\n            </Text>\n          </AutoRow>\n          <RowFixed gap=\"8px\">\n            <ButtonEmpty\n              padding=\"6px 8px\"\n              $borderRadius=\"12px\"\n              width=\"fit-content\"\n              onClick={() => setShowMore(!showMore)}\n            >\n              {showMore ? (\n                <>\n                  <Trans>Manage</Trans>\n                  <ChevronUp size=\"20\" style={{ marginLeft: '10px' }} />\n                </>\n              ) : (\n                <>\n                  <Trans>Manage</Trans>\n                  <ChevronDown size=\"20\" style={{ marginLeft: '10px' }} />\n                </>\n              )}\n            </ButtonEmpty>\n          </RowFixed>\n        </FixedHeightRow>\n\n        {showMore && (\n          <AutoColumn gap=\"sm\">\n            <FixedHeightRow>\n              <Text fontSize={16} fontWeight={535}>\n                <Trans>Your total pool tokens:</Trans>\n              </Text>\n              <Text fontSize={16} fontWeight={535}>\n                {userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}\n              </Text>\n            </FixedHeightRow>\n            {stakedBalance && (\n              <FixedHeightRow>\n                <Text fontSize={16} fontWeight={535}>\n                  <Trans>Pool tokens in rewards pool:</Trans>\n                </Text>\n                <Text fontSize={16} fontWeight={535}>\n                  {stakedBalance.toSignificant(4)}\n                </Text>\n              </FixedHeightRow>\n            )}\n            <FixedHeightRow>\n              <RowFixed>\n                <Text fontSize={16} fontWeight={535}>\n                  <Trans>Pooled {currency0.symbol}:</Trans>\n                </Text>\n              </RowFixed>\n              {token0Deposited ? (\n                <RowFixed>\n                  <Text fontSize={16} fontWeight={535} marginLeft=\"6px\">\n                    {token0Deposited?.toSignificant(6)}\n                  </Text>\n                  <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={currency0} />\n                </RowFixed>\n              ) : (\n                '-'\n              )}\n            </FixedHeightRow>\n\n            <FixedHeightRow>\n              <RowFixed>\n                <Text fontSize={16} fontWeight={535}>\n                  <Trans>Pooled {currency1.symbol}:</Trans>\n                </Text>\n              </RowFixed>\n              {token1Deposited ? (\n                <RowFixed>\n                  <Text fontSize={16} fontWeight={535} marginLeft=\"6px\">\n                    {token1Deposited?.toSignificant(6)}\n                  </Text>\n                  <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={currency1} />\n                </RowFixed>\n              ) : (\n                '-'\n              )}\n            </FixedHeightRow>\n\n            <FixedHeightRow>\n              <Text fontSize={16} fontWeight={535}>\n                <Trans>Your pool share:</Trans>\n              </Text>\n              <Text fontSize={16} fontWeight={535}>\n                {poolTokenPercentage\n                  ? (poolTokenPercentage.toFixed(2) === '0.00' ? '<0.01' : poolTokenPercentage.toFixed(2)) + '%'\n                  : '-'}\n              </Text>\n            </FixedHeightRow>\n\n            {userDefaultPoolBalance && JSBI.greaterThan(userDefaultPoolBalance.quotient, BIG_INT_ZERO) && (\n              <RowBetween marginTop=\"10px\">\n                <ButtonPrimary\n                  padding=\"8px\"\n                  $borderRadius=\"8px\"\n                  as={Link}\n                  to={`/migrate/v2/${pair.liquidityToken.address}`}\n                  width=\"64%\"\n                >\n                  <Trans>Migrate</Trans>\n                </ButtonPrimary>\n                <ButtonSecondary\n                  padding=\"8px\"\n                  $borderRadius=\"8px\"\n                  as={Link}\n                  width=\"32%\"\n                  to={`/remove/v2/${currencyId(currency0)}/${currencyId(currency1)}`}\n                >\n                  <Trans>Remove</Trans>\n                </ButtonSecondary>\n              </RowBetween>\n            )}\n          </AutoColumn>\n        )}\n      </AutoColumn>\n    </StyledPositionCard>\n  )\n}\n","import { getCreate2Address } from '@ethersproject/address'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { Trans } from '@lingui/macro'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Token, V2_FACTORY_ADDRESSES } from '@vanadex/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport MigrateSushiPositionCard from 'components/PositionCard/Sushi'\nimport MigrateV2PositionCard from 'components/PositionCard/V2'\nimport { SwitchLocaleLink } from 'components/SwitchLocaleLink'\nimport { V2Unsupported } from 'components/V2Unsupported'\nimport { useNetworkSupportsV2 } from 'hooks/useNetworkSupportsV2'\nimport { PairState, useV2Pairs } from 'hooks/useV2Pairs'\nimport { ReactNode, useMemo } from 'react'\nimport { Text } from 'rebass'\nimport { useTheme } from 'styled-components'\nimport { BackArrowLink, StyledInternalLink, ThemedText } from 'theme/components'\n\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn } from '../../components/Column'\nimport QuestionHelper from '../../components/QuestionHelper'\nimport { AutoRow } from '../../components/Row'\nimport { Dots } from '../../components/swap/styled'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/connection/hooks'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\nimport { BodyWrapper } from '../AppBody'\n\nfunction EmptyState({ message }: { message: ReactNode }) {\n  return (\n    <AutoColumn style={{ minHeight: 200, justifyContent: 'center', alignItems: 'center' }}>\n      <ThemedText.DeprecatedBody>{message}</ThemedText.DeprecatedBody>\n    </AutoColumn>\n  )\n}\n\n// quick hack because sushi init code hash is different\nconst computeSushiPairAddress = ({ tokenA, tokenB }: { tokenA: Token; tokenB: Token }): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n  )\n}\n\n/**\n * Given two tokens return the sushiswap liquidity token that represents its liquidity shares\n * @param tokenA one of the two tokens\n * @param tokenB the other token\n */\nfunction toSushiLiquidityToken([tokenA, tokenB]: [Token, Token]): Token {\n  return new Token(tokenA.chainId, computeSushiPairAddress({ tokenA, tokenB }), 18, 'SLP', 'SushiSwap LP Token')\n}\n\nexport default function MigrateV2() {\n  const theme = useTheme()\n  const { account, chainId } = useWeb3React()\n\n  const v2FactoryAddress = chainId ? V2_FACTORY_ADDRESSES[chainId] : undefined\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  const trackedTokenPairs = useTrackedTokenPairs()\n\n  // calculate v2 + sushi pair contract addresses for all token pairs\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () =>\n      trackedTokenPairs.map((tokens) => {\n        // sushi liquidity token or null\n        const sushiLiquidityToken = chainId === 1 ? toSushiLiquidityToken(tokens) : null\n        return {\n          v2liquidityToken: v2FactoryAddress ? toV2LiquidityToken(tokens) : undefined,\n          sushiLiquidityToken,\n          tokens,\n        }\n      }),\n    [trackedTokenPairs, chainId, v2FactoryAddress]\n  )\n\n  //  get pair liquidity token addresses for balance-fetching purposes\n  const allLiquidityTokens = useMemo(() => {\n    const v2 = tokenPairsWithLiquidityTokens.map(({ v2liquidityToken }) => v2liquidityToken)\n    const sushi = tokenPairsWithLiquidityTokens\n      .map(({ sushiLiquidityToken }) => sushiLiquidityToken)\n      .filter((token): token is Token => !!token)\n\n    return [...v2, ...sushi]\n  }, [tokenPairsWithLiquidityTokens])\n\n  // fetch pair balances\n  const [pairBalances, fetchingPairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    allLiquidityTokens\n  )\n\n  // filter for v2 liquidity tokens that the user has a balance in\n  const tokenPairsWithV2Balance = useMemo(() => {\n    if (fetchingPairBalances) return []\n\n    return tokenPairsWithLiquidityTokens\n      .filter(({ v2liquidityToken }) => v2liquidityToken && pairBalances[v2liquidityToken.address]?.greaterThan(0))\n      .map((tokenPairsWithLiquidityTokens) => tokenPairsWithLiquidityTokens.tokens)\n  }, [fetchingPairBalances, tokenPairsWithLiquidityTokens, pairBalances])\n\n  // filter for v2 liquidity tokens that the user has a balance in\n  const tokenPairsWithSushiBalance = useMemo(() => {\n    if (fetchingPairBalances) return []\n\n    return tokenPairsWithLiquidityTokens.filter(\n      ({ sushiLiquidityToken }) => !!sushiLiquidityToken && pairBalances[sushiLiquidityToken.address]?.greaterThan(0)\n    )\n  }, [fetchingPairBalances, tokenPairsWithLiquidityTokens, pairBalances])\n\n  const v2Pairs = useV2Pairs(tokenPairsWithV2Balance)\n  const v2IsLoading = fetchingPairBalances || v2Pairs.some(([pairState]) => pairState === PairState.LOADING)\n\n  const networkSupportsV2 = useNetworkSupportsV2()\n  if (!networkSupportsV2) return <V2Unsupported />\n\n  return (\n    <>\n      <BodyWrapper style={{ padding: 24 }}>\n        <AutoColumn gap=\"16px\">\n          <AutoRow style={{ alignItems: 'center', justifyContent: 'space-between' }} gap=\"8px\">\n            <BackArrowLink to=\"/pools\" />\n            <ThemedText.DeprecatedMediumHeader>\n              <Trans>Migrate V2 liquidity</Trans>\n            </ThemedText.DeprecatedMediumHeader>\n            <div>\n              <QuestionHelper text={<Trans>Migrate your liquidity tokens from Uniswap V2 to Uniswap V3.</Trans>} />\n            </div>\n          </AutoRow>\n\n          <ThemedText.DeprecatedBody style={{ marginBottom: 8, fontWeight: 485 }}>\n            <Trans>\n              For each pool shown below, click migrate to remove your liquidity from Uniswap V2 and deposit it into\n              Uniswap V3.\n            </Trans>\n          </ThemedText.DeprecatedBody>\n\n          {!account ? (\n            <LightCard padding=\"40px\">\n              <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\n                <Trans>Connect to a wallet to view your V2 liquidity.</Trans>\n              </ThemedText.DeprecatedBody>\n            </LightCard>\n          ) : v2IsLoading ? (\n            <LightCard padding=\"40px\">\n              <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\n                <Dots>\n                  <Trans>Loading</Trans>\n                </Dots>\n              </ThemedText.DeprecatedBody>\n            </LightCard>\n          ) : v2Pairs.filter(([, pair]) => !!pair).length > 0 ? (\n            <>\n              {v2Pairs\n                .filter(([, pair]) => !!pair)\n                .map(([, pair]) => (\n                  <MigrateV2PositionCard key={(pair as Pair).liquidityToken.address} pair={pair as Pair} />\n                ))}\n\n              {tokenPairsWithSushiBalance.map(({ sushiLiquidityToken, tokens }) => {\n                return (\n                  <MigrateSushiPositionCard\n                    key={(sushiLiquidityToken as Token).address}\n                    tokenA={tokens[0]}\n                    tokenB={tokens[1]}\n                    liquidityToken={sushiLiquidityToken as Token}\n                  />\n                )\n              })}\n            </>\n          ) : (\n            <EmptyState message={<Trans>No V2 liquidity found.</Trans>} />\n          )}\n\n          <AutoColumn justify=\"center\" gap=\"md\">\n            <Text textAlign=\"center\" fontSize={14} style={{ padding: '.5rem 0 .5rem 0' }}>\n              <Trans>\n                Don’t see one of your v2 positions?{' '}\n                <StyledInternalLink id=\"import-pool-link\" to=\"/pools/v2/find\">\n                  Import it.\n                </StyledInternalLink>\n              </Trans>\n            </Text>\n          </AutoColumn>\n        </AutoColumn>\n      </BodyWrapper>\n      <SwitchLocaleLink />\n    </>\n  )\n}\n","import { PropsWithChildren } from 'react'\nimport styled from 'styled-components'\nimport { Z_INDEX } from 'theme/zIndex'\n\ninterface BodyWrapperProps {\n  $margin?: string\n  $maxWidth?: string\n}\n\nexport const BodyWrapper = styled.main<BodyWrapperProps>`\n  position: relative;\n  margin-top: ${({ $margin }) => $margin ?? '0px'};\n  max-width: ${({ $maxWidth }) => $maxWidth ?? '420px'};\n  width: 100%;\n  background: ${({ theme }) => theme.surface1};\n  border-radius: 16px;\n  border: 1px solid ${({ theme }) => theme.surface3};\n  margin-top: 1rem;\n  margin-left: auto;\n  margin-right: auto;\n  z-index: ${Z_INDEX.default};\n  font-feature-settings: 'ss01' on, 'ss02' on, 'cv01' on, 'cv03' on;\n`\n\n/**\n * The styled container element that wraps the content of most pages and the tabs.\n */\nexport default function AppBody(props: PropsWithChildren<BodyWrapperProps>) {\n  return <BodyWrapper {...props} />\n}\n","import { Currency } from '@vanadex/sdk-core'\nimport { asSupportedChain } from 'constants/chains'\n\nimport { nativeOnChain, WRAPPED_NATIVE_CURRENCY } from '../constants/tokens'\n\nexport function unwrappedToken(currency: Currency): Currency {\n  if (currency.isNative) return currency\n  const formattedChainId = asSupportedChain(currency.chainId)\n  if (formattedChainId && WRAPPED_NATIVE_CURRENCY[formattedChainId]?.equals(currency))\n    return nativeOnChain(currency.chainId)\n  return currency\n}\n"],"names":["StyledPositionCard","styled","LightCard","theme","bgColor","transparentize","surface2","SushiPositionCard","tokenA","tokenB","liquidityToken","border","currency0","unwrappedToken","currency1","backgroundColor","useColor","_jsxs","children","_jsx","CardNoise","AutoColumn","gap","FixedHeightRow","AutoRow","DoubleCurrencyLogo","size","Text","fontWeight","fontSize","symbol","Dots","Trans","id","Badge","variant","BadgeVariant","WARNING","RowFixed","ButtonEmpty","padding","$borderRadius","width","as","Link","to","address","V2PositionCard","pair","stakedBalance","account","useWeb3React","token0","token1","showMore","setShowMore","useState","userDefaultPoolBalance","useTokenBalance","undefined","totalPoolTokens","useTotalSupply","userPoolBalance","add","poolTokenPercentage","JSBI","quotient","Percent","token0Deposited","token1Deposited","getLiquidityValue","onClick","_Fragment","ChevronUp","style","marginLeft","ChevronDown","toSignificant","values","0","CurrencyLogo","currency","toFixed","BIG_INT_ZERO","RowBetween","marginTop","ButtonPrimary","ButtonSecondary","currencyId","EmptyState","message","minHeight","justifyContent","alignItems","ThemedText","DeprecatedBody","computeSushiPairAddress","sortsBefore","getCreate2Address","keccak256","pack","MigrateV2","useTheme","chainId","v2FactoryAddress","V2_FACTORY_ADDRESSES","trackedTokenPairs","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","map","tokens","sushiLiquidityToken","Token","toSushiLiquidityToken","v2liquidityToken","toV2LiquidityToken","allLiquidityTokens","filter","token","pairBalances","fetchingPairBalances","useTokenBalancesWithLoadingIndicator","tokenPairsWithV2Balance","_pairBalances$v2liqui","greaterThan","tokenPairsWithSushiBalance","_pairBalances$sushiLi","v2Pairs","useV2Pairs","v2IsLoading","some","pairState","PairState","LOADING","useNetworkSupportsV2","BodyWrapper","BackArrowLink","DeprecatedMediumHeader","QuestionHelper","text","marginBottom","color","neutral3","textAlign","length","MigrateV2PositionCard","MigrateSushiPositionCard","justify","components","StyledInternalLink","SwitchLocaleLink","V2Unsupported","main","$margin","$maxWidth","surface1","surface3","Z_INDEX","default","AppBody","props","_WRAPPED_NATIVE_CURRE","isNative","formattedChainId","asSupportedChain","WRAPPED_NATIVE_CURRENCY","equals","nativeOnChain"],"sourceRoot":""}